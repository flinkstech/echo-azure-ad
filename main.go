package authenticate

import (
	"encoding/gob"
	"fmt"
	"net/http"
	"time"

	"github.com/dgrijalva/jwt-go"
	"github.com/google/uuid"
	"github.com/ipfans/echo-session"
	"github.com/labstack/echo"
	"github.com/mendsley/gojwk"
)

type (
	// AuthSettings is used as an argument to Init
	AuthSettings struct {
		ClientID     string
		TenantID     string
		ClientSecret string
		RedirectURI  string
		Skipper      func(echo.Context) bool
	}

	// ActiveDirectory is like AuthSettings but with methods and stores internal states
	ActiveDirectory struct {
		ClientID     string
		TenantID     string
		ClientSecret string
		RedirectURI  string
		Skipper      func(echo.Context) bool
		Keys         []gojwk.Key
	}

	stsPostData struct {
		IDToken      string `form:"id_token"`
		Code         string `form:"code"`
		State        string `form:"state"`
		SessionState string `form:"session_state"`
	}
	//https://docs.microsoft.com/en-gb/azure/active-directory/develop/v1-id-and-access-tokens
	//https://graph.windows.net/{tenantID}/users/{userID}/getMemberObjects
	activeDirectoryClaims struct {
		AMR        []string `json:"amr"`
		FamilyName string   `json:"family_name"`
		GivenName  string   `json:"given_name"`
		IPAddr     string   `json:"ipaddr"`
		Name       string   `json:"name"`
		Nonce      string   `json:"nonce"`
		OID        string   `json:"oid"`
		OnPremSID  string   `json:"onprem_sid"`
		TID        string   `json:"tid"`
		UniqueName string   `json:"unique_name"`
		UPN        string   `json:"upn"`
		UTI        string   `json:"uti"`
		Ver        string   `json:"ver"`
		jwt.StandardClaims
	}

	// User is a representation of the useful user data returned in an id token
	User struct {
		Username  string
		FirstName string
		LastName  string
		Email     string
		Groups    []string
		Data      map[string]interface{}
	}

	sessionStore struct {
		IDToken *activeDirectoryClaims
		Groups  []MemberGroup
	}
)

var sessionStoreKey = "authenticatekey"

// Init : returns an ActiveDirectory struct to be used outside the package
func Init(settings *AuthSettings) *ActiveDirectory {
	auth := &ActiveDirectory{}
	auth.ClientID = settings.ClientID
	auth.TenantID = settings.TenantID
	auth.RedirectURI = settings.RedirectURI
	auth.ClientSecret = settings.ClientSecret
	if settings.Skipper == nil {
		auth.Skipper = func(c echo.Context) bool { return false }
	} else {
		auth.Skipper = settings.Skipper
	}
	gob.Register(sessionStore{})
	gob.Register(activeDirectoryClaims{})
	gob.Register(MemberGroup{})
	return auth
}

// ActiveDirectoryAuthentication is echo middleware
func (a *ActiveDirectory) ActiveDirectoryAuthentication(next echo.HandlerFunc) echo.HandlerFunc {
	return func(c echo.Context) error {
		if a.sessionIsAuthenticated(c) || a.Skipper(c) {
			return next(c)
		}

		r := c.Request()

		if r.Method == "GET" {
			sess := session.Default(c)
			nonce := uuid.New().String()
			sess.Set("auth_nonce", nonce)
			sess.Save()
			return a.redirectToIdentityProvider(c, nonce)
		}

		if r.Method == "POST" {
			var form stsPostData
			if err := c.Bind(&form); err != nil {
				// If we can't bind, the POST was not from the authentication authority
				return c.String(http.StatusUnauthorized, "Unauthorized")
			}

			token, err := jwt.ParseWithClaims(form.IDToken, &activeDirectoryClaims{}, func(token *jwt.Token) (interface{}, error) {
				return a.getKey(token.Header["kid"].(string))
			})
			if err != nil {
				msg := "id_token invalid or absent"
				return c.String(http.StatusInternalServerError, msg)
			}

			if claims, ok := token.Claims.(*activeDirectoryClaims); ok && token.Valid {
				// The token signature has been verified, but check that the nonce was
				// generated by us to fend against claim impersonation
				sess := session.Default(c)
				sentNonce, _ := uuid.Parse(sess.Get("auth_nonce").(string))
				receivedNonce, _ := uuid.Parse(claims.Nonce)
				if sentNonce == receivedNonce {
					a.authenticateSession(c, claims, form.Code)
					return c.Redirect(http.StatusFound, form.State)
				}
			}

			msg := "Authentication failed"
			return c.String(http.StatusUnauthorized, msg)
		}

		msg := "Unauthorized"
		return c.String(http.StatusUnauthorized, msg)
	}
}

// GetUser returns a truncated list of user claims
func GetUser(c echo.Context) User {
	sess := session.Default(c)
	store := sess.Get(sessionStoreKey)
	if store == nil {
		return User{}
	}

	storeData := store.(sessionStore)

	names := []string{}

	for _, group := range storeData.Groups {
		names = append(names, group.DisplayName)
	}

	return User{
		LastName:  storeData.IDToken.FamilyName,
		FirstName: storeData.IDToken.GivenName,
		Username:  storeData.IDToken.UniqueName,
		Email:     storeData.IDToken.UPN,
		Groups:    names,
	}
}

// SignOut redirects the client to the signout URL, which then performs a subsequent redirect
func (a *ActiveDirectory) SignOut(c echo.Context, redirectURI string) error {
	signOutURL := "https://login.microsoftonline.com/%s/oauth2/v2.0/logout?post_logout_redirect_uri=%s"
	return c.Redirect(http.StatusFound, fmt.Sprint(signOutURL, a.TenantID, redirectURI))
}

func (a *ActiveDirectory) sessionIsAuthenticated(c echo.Context) bool {
	sess := session.Default(c)
	store := sess.Get(sessionStoreKey)
	if store == nil {
		return false
	}

	storeData := store.(sessionStore)

	expiresAt := storeData.IDToken.StandardClaims.ExpiresAt
	if expiresAt > time.Now().Unix() {
		return true
	}

	return false
}

func (a *ActiveDirectory) authenticateSession(c echo.Context, claims *activeDirectoryClaims, code string) {
	sess := session.Default(c)
	groups, _ := a.getGroups(code)
	sess.Set(sessionStoreKey, &sessionStore{
		IDToken: claims,
		Groups:  groups,
	})
	sess.Save()
}

func (a *ActiveDirectory) redirectToIdentityProvider(c echo.Context, nonce string) error {
	fstring := ("https://login.microsoftonline.com/%s/oauth2/authorize?" +
		"client_id=%s&response_type=id_token+code&redirect_uri=%s" +
		"&response_mode=form_post&scope=openid&state=%s&nonce=%s")

	authEndpoint := fmt.Sprintf(fstring, a.TenantID, a.ClientID, a.RedirectURI, c.Request().URL.Path, nonce)

	return c.Redirect(http.StatusFound, authEndpoint)
}
